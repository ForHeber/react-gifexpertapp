public class AdConfig
{
    public string LdapServer { get; set; }   // Ejemplo: "ldap.tudominio.com"
    public int LdapPort { get; set; } = 389; // Puerto est√°ndar LDAP
    public string BaseDn { get; set; }       // Ejemplo: "DC=tudominio,DC=com"
    public string Username { get; set; }     // Ejemplo: "usuario@tudominio.com"
    public string Password { get; set; }
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Novell.Directory.Ldap;
using System.Collections.Generic;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]
public class UsuariosAdController : ControllerBase
{
    private readonly AdConfig _config;

    public UsuariosAdController(IOptions<AdConfig> config)
    {
        _config = config.Value;
    }

    private async Task<LdapConnection> ConnectAsync()
    {
        var conn = new LdapConnection();
        await conn.ConnectAsync(_config.LdapServer, _config.LdapPort);
        await conn.BindAsync(_config.Username, _config.Password);
        return conn;
    }

    [HttpGet("unidades")]
    public async Task<IActionResult> ListarOUs()
    {
        try
        {
            using var conn = await ConnectAsync();
            var search = await conn.SearchAsync(
                _config.BaseDn,
                LdapConnection.ScopeSub,
                "(objectClass=organizationalUnit)",
                null,
                false
            );

            var result = new List<string>();
            await foreach (var entry in search)
            {
                result.Add(entry.Dn);
            }

            return Ok(result);
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }

    [HttpGet("usuarios/{ou}")]
    public async Task<IActionResult> ListarUsuariosEnOu(string ou)
    {
        try
        {
            using var conn = await ConnectAsync();
            string ouDn = $"OU={ou},{_config.BaseDn}";

            var search = await conn.SearchAsync(
                ouDn,
                LdapConnection.ScopeSub,
                "(objectClass=user)",
                new[] { "sAMAccountName" },
                false
            );

            var usuarios = new List<string>();
            await foreach (var entry in search)
            {
                var attr = entry.GetAttributeSet()?["sAMAccountName"];
                if (attr != null)
                {
                    usuarios.Add(attr.StringValue);
                }
            }

            return Ok(usuarios);
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }

    [HttpGet("usuario/{samAccountName}")]
    public async Task<IActionResult> ObtenerUsuario(string samAccountName)
    {
        try
        {
            using var conn = await ConnectAsync();

            var search = await conn.SearchAsync(
                _config.BaseDn,
                LdapConnection.ScopeSub,
                $"(sAMAccountName={samAccountName})",
                new[] { "displayName", "mail", "sAMAccountName" },
                false
            );

            await foreach (var entry in search)
            {
                var attrs = entry.GetAttributeSet();
                return Ok(new
                {
                    Nombre = attrs["displayName"]?.StringValue,
                    Correo = attrs["mail"]?.StringValue,
                    Cuenta = attrs["sAMAccountName"]?.StringValue
                });
            }

            return NotFound("Usuario no encontrado");
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }

    [HttpPost("crear")]
    public async Task<IActionResult> CrearUsuario([FromBody] CrearUsuarioDto dto)
    {
        try
        {
            using var conn = await ConnectAsync();
            string userDn = $"CN={dto.Nombre},OU={dto.Ou},{_config.BaseDn}";

            var attributes = new LdapAttributeSet
            {
                new LdapAttribute("objectClass", new[] { "top", "person", "organizationalPerson", "user" }),
                new LdapAttribute("sAMAccountName", dto.Usuario),
                new LdapAttribute("displayName", dto.Nombre),
                new LdapAttribute("userPassword", dto.Clave) // Puede no tener efecto en AD
            };

            var entry = new LdapEntry(userDn, attributes);
            await conn.AddAsync(entry);

            return Ok("Usuario creado (si el servidor lo permite)");
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }

    [HttpPut("editar/{usuario}")]
    public async Task<IActionResult> EditarUsuario(string usuario, [FromBody] EditarUsuarioDto dto)
    {
        try
        {
            using var conn = await ConnectAsync();

            var search = await conn.SearchAsync(_config.BaseDn, LdapConnection.ScopeSub, $"(sAMAccountName={usuario})", null, false);
            await foreach (var entry in search)
            {
                var modifications = new List<LdapModification>
                {
                    new LdapModification(LdapModification.Replace, new LdapAttribute("displayName", dto.Nombre)),
                    new LdapModification(LdapModification.Replace, new LdapAttribute("mail", dto.Mail))
                };

                await conn.ModifyAsync(entry.Dn, modifications.ToArray());
                return Ok("Usuario actualizado");
            }

            return NotFound("Usuario no encontrado");
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }

    [HttpDelete("eliminar/{usuario}")]
    public async Task<IActionResult> EliminarUsuario(string usuario)
    {
        try
        {
            using var conn = await ConnectAsync();

            var search = await conn.SearchAsync(_config.BaseDn, LdapConnection.ScopeSub, $"(sAMAccountName={usuario})", null, false);
            await foreach (var entry in search)
            {
                await conn.DeleteAsync(entry.Dn);
                return Ok("Usuario eliminado");
            }

            return NotFound("Usuario no encontrado");
        }
        catch (LdapException ex)
        {
            return StatusCode(500, $"LDAP error: {ex.Message}");
        }
    }
}









public class CrearUsuarioDto
{
    public string Ou { get; set; }
    public string Nombre { get; set; }
    public string Usuario { get; set; }
    public string Clave { get; set; }
}

public class EditarUsuarioDto
{
    public string Nombre { get; set; }
    public string Mail { get; set; }
}
